{"version":3,"sources":["../../../../react-components/table/Table.jsx"],"names":[],"mappings":"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","file":"Table.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Memory from \"dstore/Memory\";\nimport config from \"./config\";\nimport \"hui/table\";\nimport \"hui/table-virtual\";\nimport LazyRowExpansionRenderer from \"hui/table/LazyRowExpansionRenderer\";\nimport \"xstyle/css!hui-css/hui-table.min.css\";\n\n// A React-friendly version of HATable\nexport default class Table extends React.Component {\n    static get displayName() {\n        return \"Table\";\n    }\n\n    static get propTypes() {\n        return {\n            columns: React.PropTypes.object.isRequired,\n            data: React.PropTypes.array,\n            collection: React.PropTypes.object,\n            options: React.PropTypes.object\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        // Namespace for API methods to expose on this instance.\n        //   @see https://facebook.github.io/react/tips/expose-component-functions.html\n        this.api = {};\n\n        // List other instance props for documentation\n        this.store = null;\n        this.totals = null;\n        this.table = null;\n        this.rowExpansionNodeCache = {};\n        this.cache = {};\n        this.otherSettingsNode = null;\n        this.tableBarCustomNode = null;\n        this.tableBarCustomActionNode = null;\n    }\n\n    // React component lifecycle\n    //   @see https://facebook.github.io/react/docs/component-specs.html#mounting-componentdidmount\n    componentDidMount() {\n        // Create a version of HATable in memory\n        this.table = this.renderTable();\n\n        // Add the full table domNode to the component\n        // Although this is not the most efficient use of React it does allow us to reuse the full\n        // table implementation\n        this.wrapper.appendChild(this.table);\n    }\n\n    // React component lifecycle\n    //   @see https://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate\n    shouldComponentUpdate(nextProps) {\n        // Only allow option updates to the underlying table. No store or column changes.\n        this.mixinOptions(this.table, nextProps.options);\n        this.connectCallbacks(this.table, nextProps.options);\n\n        // Update the store data (if needed)\n        this.setStoreData(nextProps.data);\n\n        //remove the render modes from the current props a.k.a this.props.options\n        //new render modes from nextProps.options will be processed as part of postTableRender\n        this.preTableRender(this.table, this.props.options);\n\n        // Apply any post render changes\n        this.postTableRender(this.table, nextProps.options, nextProps.data);\n\n        // Update the columns\n        // Setting the columns triggers a table refresh so do this last\n        this.table.columns = this.adaptColumns(nextProps.columns);\n\n        // Don't render the whole table again. We render it once and apply approved changes.\n        return false;\n    }\n\n    // React component lifecycle\n    //   @see https://facebook.github.io/react/docs/component-specs.html#unmounting-componentwillunmount\n    componentWillUnmount() {\n        // Clean React nodes\n        if (this.otherSettingsNode) {\n            ReactDOM.unmountComponentAtNode(this.otherSettingsNode);\n        }\n        if (this.tableBarCustomNode) {\n            ReactDOM.unmountComponentAtNode(this.tableBarCustomNode);\n        }\n        if (this.tableBarCustomActionNode) {\n            ReactDOM.unmountComponentAtNode(this.tableBarCustomActionNode);\n        }\n\n        //clear out row expansion nodes\n        this.clearRowExpansionNodeCache();\n        // Clear the cache\n        this.clearCache();\n\n        // Clean up all our table references\n        this.table = null;\n        this.api = null;\n        this.totals = null;\n        this.store = null;\n        this.wrapper = null;\n        this.otherSettingsNode = null;\n        this.tableBarCustomNode = null;\n        this.tableBarCustomActionNode = null;\n        this.rowExpansionNodeCache = null;\n        this.cache = null;\n    }\n\n    // Unmount all react mounted nodes\n    clearCache() {\n        Object.keys(this.cache).forEach((key) => {\n            ReactDOM.unmountComponentAtNode(this.cache[key]);\n        });\n\n        this.cache = {};\n    }\n\n    //Unmount all row expansion nodes\n    clearRowExpansionNodeCache() {\n        Object.keys(this.rowExpansionNodeCache).forEach((key) => {\n            ReactDOM.unmountComponentAtNode(this.rowExpansionNodeCache[key]);\n        });\n\n        this.rowExpansionNodeCache = {};\n    }\n\n    // Get a reference to the root dom node for this component\n    handleWrapperRef(wrapper) {\n        this.wrapper = wrapper;\n    }\n\n    // Check to see if we should update the key value of the HATable instance\n    shouldUpdateTablePropery(table, key, value) {\n        // Don't update the key if it's already set or if it's a key that requires special handling\n        return (!config.customOptions[key] && !config.eventsToCallbacks[key] && table[key] !== value);\n    }\n\n    // Hook up events from the underlying HATable instance to the corresponding\n    // callback methods\n    connectCallbacks(table, options) {\n        if (table && options) {\n            Object.keys(config.eventsToCallbacks).forEach((key) => {\n                const callback = options[key];\n                let callbackDef, name, filter;\n\n                // If the callback exists in the options passed in\n                if (callback) {\n                    callbackDef = config.eventsToCallbacks[key];\n                    name = callbackDef.name;\n                    filter = callbackDef.filter;\n\n                    // Remove the old one (if any) and add the new one\n                    table.off(name);\n                    table.on(name, (event) => {\n                        // Filter the event object so the results are React friendly\n                        // before we pass it to the callback function.\n                        const e = filter(event);\n                        callback(e);\n                    });\n                }\n            });\n        }\n    }\n\n    // Given an HATable instance, apply the options to it\n    mixinOptions(table, options) {\n        if (table && options) {\n            Object.keys(options).forEach((key) => {\n                const value = options[key];\n\n                // Only update the key if we need to\n// FIXME What do we do if the value is a complex object or array?\n                if (this.shouldUpdateTablePropery(table, key, value)) {\n                    table[key] = value;\n                }\n            });\n        }\n    }\n\n    // Check and see if an object is a React Component.\n    // This will return false for React Elements and other functions.\n    isReactComponent(obj) {\n        // Using instanceof does not work for some reason\n        return React.Component.isPrototypeOf(obj);\n    }\n\n// FIXME How should we handle clearing of options? Should we make the user clear them? Or do we want to add some logic to\n// track and clear them? For example: Setting and/or clearing totals.\n\n    // Perform any adaptations to make the column definitions compatible with this\n    // component.\n    adaptColumns(cols) {\n        const columns = {};\n\n        // Loop through all of the columns\n        Object.keys(cols).forEach((key) => {\n            let Renderer, renderCell, onRenderCell;\n            const that = this;\n\n            columns[key] = cols[key];\n            renderCell = columns[key].renderCell;       // eslint-disable-line prefer-const\n            onRenderCell = columns[key].onRenderCell;   // eslint-disable-line prefer-const\n\n            // If the column has a custom renderer, adapt it so it is compatible with HATable.\n            if (this.isReactComponent(renderCell)) {\n                // If it's a react component...\n// FIXME Remove support for this...\n                console.warn(\"DEPRECATION WARNING: Passing React components to renderCell is deprecated. Use the onRender callback instead.\");\n\n                Renderer = renderCell;\n                columns[key].renderCell = function(rowData, value, node, options) {\n                    return that.renderReactCell(Renderer, this.field, rowData, value, node, options);\n                };\n            } else if (onRenderCell) {\n                // If it's a custom callback function...\n                columns[key].renderCell = function(rowData, value, node, options) {\n                    const Element = onRenderCell({\n                        // Don't pass the node to the consumer. It doesn't make sense in a React world.\n                        rowData: rowData,\n                        value: value,\n                        options: options,\n                        column: this.field\n                    });\n                    return that.renderReactCell(Element, this.field, rowData, value, node, options);\n                };\n            } else {\n                // No overrides. Do nothing...\n            }\n        });\n\n        return columns;\n    }\n\n    // Render a React component or Element to a cell\n    renderReactCell(ComponentOrElement, columnId, rowData, value, node, options) {\n        const id = this.store.getIdentity(rowData),\n            key = this.getCellKey(id, columnId),\n            cachedNode = this.cache[key],\n\n            // If we have the React Node in the cache, use it\n            // Otherwise create an empty node to put it in.\n            n = cachedNode || document.createElement(\"div\");\n\n        // Render the component or element to the node for the row\n        if (React.isValidElement(ComponentOrElement)) {\n            // It's an element so we don't need to write JSX to pass in the props\n            ReactDOM.render(ComponentOrElement, n);\n        } else {\n            // It's a component that needs to be rendered to JSX\n            ReactDOM.render(<ComponentOrElement rowData={rowData} value={value} node={node} options={options} columnId={columnId} />, n);\n        }\n\n        // Add the React node to the cache so we can use it later (if needed)\n        this.cache[key] = n;\n\n        // Add the React node to the cell node\n        node.appendChild(n);\n    }\n\n    // Get a key to the React cell cache\n    getCellKey(rowId, columnId) {\n        return `${rowId}-${columnId}`;\n    }\n\n    // Get a reference to our internal store/collection\n    getStore() {\n        let store;\n\n        if (this.store) {\n            store = this.store;\n        } else if (this.props.collection) {\n            store = this.props.collection;\n        } else {\n            store = new Memory();\n        }\n\n        return store;\n    }\n\n    // Update our internal store with the data. This will throw out the previous data and replace with new.\n    setStoreData(data) {\n        if (data) {\n            this.store.setData(data);\n        }\n    }\n\n    // Expose a subset of the API methods from the underlying HATable instance for consumers to call directly\n    // through the ref of this component\n    //   E.G. tableRef.api.resize();\n    exposeApi(table) {\n        Object.keys(config.apiToExpose).forEach((key) => {\n            this.api[key] = function() {\n                // Proxy the call on this component to the API method on the underlying\n                // HATable instance\n                return table[key].apply(table, arguments);  //eslint-disable-line prefer-spread\n            };\n        });\n    }\n\n    addRenderModes(table, nextOptions) {\n        const that = this;\n        //add render modes now\n        if (nextOptions && nextOptions.renderModes) {\n            nextOptions.renderModes.forEach(renderModeItem => {\n                const expansionHeight = renderModeItem.renderer.expansionHeight,\n                    activatorSelector = renderModeItem.renderer.activatorSelector;\n                let renderRowExpansionContent = null,\n                    CustomRowExpansionRenderer = null;\n\n                //if the custom row expansion function is defined, use it\n                if (renderModeItem.renderer.onRenderRowExpansionContent) {\n                  //setup the callback for row expansion\n                    renderRowExpansionContent = function(object, hideExpansion) {\n                        const ExpansionContent = renderModeItem.renderer.onRenderRowExpansionContent({\n                            object: object,\n                            hideExpansion: hideExpansion\n                        });\n                        return that.renderReactRowExpansionContent(ExpansionContent, object.id, renderModeItem.renderMode);\n                    };\n                }\n                //use the internal LazyRowExpansionRenderer\n                CustomRowExpansionRenderer = LazyRowExpansionRenderer.bind(null, {\n                    activatorSelector: activatorSelector,\n                    expansionHeight: expansionHeight,\n                    renderRowExpansionContent: renderRowExpansionContent\n                });\n                //Add render mode to the main table\n                table.addRenderMode(renderModeItem.renderMode, new CustomRowExpansionRenderer());\n            });\n        }\n    }\n\n    removeRenderModes(table, prevOptions) {\n        //remove render nodes\n        if (prevOptions && prevOptions.renderModes) {\n            prevOptions.renderModes.forEach(renderModeItem => {\n                table.removeRenderMode(renderModeItem.renderMode);\n            });\n        }\n    }\n\n    // Apply any pre rendering changes based on options\n    preTableRender(table, prevOptions) {\n      //process row rendering\n        if (prevOptions && prevOptions.renderModes) {\n          //renderModes may have been removed or updated by the user in options settings\n          //we need to clean up and add again as part of postTableRender\n            this.removeRenderModes(table, prevOptions);\n        }\n    }\n\n    //render row expansion content from a React Element\n    renderReactRowExpansionContent(ExpansionContent, objectId, renderMode) {\n        //generate a unique key for a React element per row based on the render mode\n        const key =  `${objectId}-${renderMode}`,\n            cachedNode = this.rowExpansionNodeCache[key],\n            //reuse React node from the cache or create a new one\n            n = cachedNode || document.createElement(\"div\");\n        //render the expansion content\n        ReactDOM.render(ExpansionContent, n);\n\n        // Add the React node to the cache so we can use and clean it up later (if needed)\n        this.rowExpansionNodeCache[key] = n;\n\n        return n;\n    }\n\n    // For batch mode select any rows that are marked \"_selected: true\" while we're loading the table\n    selectRows(table, data) {\n        data.forEach(dataRow => {\n            if (dataRow._selected) {\n                const id = this.store.getIdentity(dataRow),\n                    row = table.row(id);\n\n                table.select(row);\n            }\n        });\n    }\n\n    // Render any Other Settings content\n    applyOtherSettings(table, options) {\n        const SettingsRenderer = options.settingsRenderer;\n\n        // See if the options have a custom settings Renderer component\n        if (SettingsRenderer) {\n            // Render the component to the node for Other Settings\n// FIXME Remove support for this\n            console.warn(\"DEPRECATION WARNING: Passing React components to settingsRenderer is deprecated. Use the onOtherSettingsRender callback instead.\");\n            ReactDOM.render(<SettingsRenderer />, table.otherSettingsNode);\n\n            // Keep a reference so we can unmount it later\n            this.otherSettingsNode = table.otherSettingsNode;\n        } else if (options.onOtherSettingsRender) {\n            const Element = options.onOtherSettingsRender();\n\n            // Render the React Element\n            // Keep a reference so we can unmount it later\n            ReactDOM.render(Element, table.otherSettingsNode);\n            this.otherSettingsNode = table.otherSettingsNode;\n        } else {\n            // No customization\n        }\n    }\n\n    // Render any custom table bar content on the left side\n    applyTableBarCustomContent(table, options) {\n        // Left side of table bar\n        if (options.onTableBarCustomRender) {\n            const Element = options.onTableBarCustomRender();\n\n            // Render the React Element\n            // Keep a reference so we can unmount it later\n            ReactDOM.render(Element, table.tableBarCustomNode);\n            this.tableBarCustomNode = table.tableBarCustomNode;\n        }\n\n        // Right side of table bar\n        if (options.onTableBarCustomActionRender) {\n            const Element = options.onTableBarCustomActionRender();\n\n            // Render the React Element\n            // Keep a reference so we can unmount it later\n            ReactDOM.render(Element, table.tableBarCustomActionNode);\n            this.tableBarCustomActionNode = table.tableBarCustomActionNode;\n        }\n    }\n\n    // Handle setting the totals\n    applyTotals(table, options) {\n        // Handle totals with a resize event.\n        // Only attach the listener once\n        if (options.totals && !this.totals) {\n            table.on(\"table-resize\", () => {\n                table.totals = this.totals;\n            });\n        }\n\n        // Always update or clear the totals so they are reflected in the resize event (if attached)\n        this.totals = options.totals;\n    }\n\n    // Apply any post rendering changes\n    postTableRender(table, options, data) {\n        if (options) {\n            this.applyOtherSettings(table, options);\n            this.applyTableBarCustomContent(table, options);\n            this.applyTotals(table, options);\n\n            //process row rendering, if any\n            if (options.renderModes) {\n                this.addRenderModes(table, options);\n            }\n        }\n\n        if (data) {\n            // Select any rows during loading\n            this.selectRows(table, data);\n        }\n    }\n\n    // Create an instance of HATable with the props of the component and return it\n    renderTable() {\n        const options = this.props.options,\n            type = (options && options.virtual) ? \"ha-table-virtual\" : \"ha-table\",\n\n            // If virtual scrolling is enabled, create a virtual table. Otherwise create a regular table\n            table = document.createElement(type);\n\n        // Init the store\n        this.store = this.getStore();\n        this.setStoreData(this.props.data);\n\n        // Initialize the table instance\n        //   Add required and optional properties\n        //   Connect events to callbacks\n        //   Expose table API\n        this.mixinOptions(table, options);\n        this.connectCallbacks(table, options);\n        table.collection = this.store;\n        table.columns = this.adaptColumns(this.props.columns);\n        this.exposeApi(table);\n\n        // Apply any post render changes\n        this.postTableRender(table, options, this.props.data);\n\n        return table;\n    }\n\n    // React component lifecycle\n    //   @see https://facebook.github.io/react/docs/component-specs.html#render\n    render() {\n        const handleRef = this.handleWrapperRef.bind(this);\n\n        // Render a root dom node to append the underlying HATable instance to.\n        return (\n            <div className=\"ha-table-react-wrapper\" ref={handleRef}></div>\n        );\n    }\n}\n"]}